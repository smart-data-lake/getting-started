dataObjects {

  ext-departures {
    type = CustomWebserviceDataObject
    schema = """array< struct< icao24: string, firstSeen: integer, estDepartureAirport: string, lastSeen: integer, estArrivalAirport: string, callsign: string, estDepartureAirportHorizDistance: integer, estDepartureAirportVertDistance: integer, estArrivalAirportHorizDistance: integer, estArrivalAirportVertDistance: integer, departureAirportCandidatesCount: integer, arrivalAirportCandidatesCount: integer >>"""
    baseUrl = "https://opensky-network.org/api/flights/departure"
    nRetry = 5
    queryParameters = [{
      airport = "LSZB"
      begin = 1630200800   # 29.08.2021
      end = 1630310979     # 30.08.2021
    },{
      airport = "EDDF"
      airport = ${?AIRPORT}
      begin = 1630200800
      end = 1630310979
    }]
    timeouts {
      connectionTimeoutMs = 200000
      readTimeoutMs = 200000
    }
    metadata = {
      name = "Flight Departures Web Download"
      description = "OpenSky Network flight departures"
      layer = "extern"
      subjectArea = "flight data"
      tags = ["aviation", "flight", "departures"]
    }
  }

  int-departures {
    type = DeltaLakeTableDataObject
    path = "~{id}"
    table {
      db = "default"
      name = "int_departures"
      primaryKey = [icao24, estdepartureairport, dt]
    }
    metadata = {
      name = "Flight Departures"
      description = "OpenSky Network flight departures"
      layer = "integration"
      subjectArea = "flight data"
      tags = ["aviation", "flight", "departures"]
    }
  }
}

actions {
  download-deduplicate-departures {
    type = DeduplicateAction
    inputId = ext-departures
    outputId = int-departures
    transformers = [{
      type = SQLDfTransformer
      code = "select foobar, ext_departures.*, date_format(from_unixtime(firstseen),'yyyyMMdd') dt from ext_departures"
    },{
      type = ScalaCodeSparkDfTransformer
      code = """
        import org.apache.spark.sql.{DataFrame, SparkSession}
        def transform(session: SparkSession, options: Map[String,String], df: DataFrame, dataObjectId: String) : DataFrame = {
          import session.implicits._
          df.dropDuplicates("icao24", "estdepartureairport", "dt")
        }
        // return as function
        transform _
      """
    }]
    metadata {
      name = "Flight departure data injection"
      description = "download and cleaning of flight departure data"
      tags = ["historize", "deduplicated", "DeltaLake"]
      feed = download
    }
  }
}

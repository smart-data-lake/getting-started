
dataObjects {
  btl-departures-arrivals-airports {
    type = DeltaLakeTableDataObject
    path = "~{id}"
    partitions = [estdepartureairport]
    table {
      db = "default"
      name = "btl_departures_arrivals_airports"
    }
  }

  btl-distances {
    type = DeltaLakeTableDataObject
    path = "~{id}"
    partitions = [estdepartureairport]
    table {
      db = "default"
      name = "btl_distances"
    }
  }

}

actions {
  join-departures-airports {
    type = CustomDataFrameAction
    inputIds = [int-departures, int-airports]
    outputIds = [btl-departures-arrivals-airports]
    transformers = [{
      type = SQLDfsTransformer
      code = {
        btl-connected-airports = """
          select int_departures.estdepartureairport, int_departures.estarrivalairport,
            airports.*
          from int_departures join int_airports airports on int_departures.estArrivalAirport = airports.ident
        """
      }},
      {
        type = SQLDfsTransformer
        code = {
          btl-departures-arrivals-airports = """
            select btl_connected_airports.estdepartureairport, btl_connected_airports.estarrivalairport,
              btl_connected_airports.name as arr_name, btl_connected_airports.latitude_deg as arr_latitude_deg, btl_connected_airports.longitude_deg as arr_longitude_deg,
              airports.name as dep_name, airports.latitude_deg as dep_latitude_deg, airports.longitude_deg as dep_longitude_deg
            from btl_connected_airports join int_airports airports on btl_connected_airports.estdepartureairport = airports.ident
          """
        }
      }
    ]
    metadata {
      name = "Airport Departures Join"
      description = "merging flight details and airport locations"
      tags = ["merge", "airports", "coordinates"]
      feed = compute
    }
  }

  compute-distances {
    type = CopyAction
    inputId = btl-departures-arrivals-airports
    outputId = btl-distances
    transformers = [{
      type = ScalaClassSparkDfTransformer
      className = com.sample.ComputeDistanceTransformer
    }]
    metadata {
      name = "Flight distance computation"
      description = "compute the flight distance between departure and arrival"
      tags = ["compute", "coordinates", "distances"]
      feed = compute
    }
  }
}

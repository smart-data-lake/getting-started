
# This is the airports.conf file as it should look after completing part-3

dataObjects {

  ext-airports {
    type = WebserviceFileDataObject
    url = "https://davidmegginson.github.io/ourairports-data/airports.csv"
    timeouts {
      connectionTimeoutMs = 3000
      readTimeoutMs = 200000
    }
    metadata {
      tags = ["aviation", "airport", "location"]
      layer = "extern"
      subjectArea = "airports"
      description = "Webservice to query airport masterdata"
    }
  }

  stg-airports {
    type = CsvFileDataObject
    path = ${env.basePathWithId}
    schema = "id string, ident string, type string, name string, latitude_deg string, longitude_deg string, elevation_ft string, continent string, iso_country string, iso_region string, municipality string, scheduled_service string, gps_code string, iata_code string, local_code string, home_link string, wikipedia_link string, keywords string"
    metadata {
      name = "Staging file of Airport location data"
      tags = ["aviation", "airport", "location"]
      layer = "staging"
      subjectArea = "airports"
      description = "contains GPS coordinates, elevation, continent, country, region"
    }
  }

  int-airports {
    type = DeltaLakeTableDataObject
    path = ${env.tablePathWithId}
    table = {
      catalog = ${env.catalog}
      db = ${env.database}
      name = "int_airports"
      primaryKey = [ident]
    }
    metadata {
      name = "Airport locations"
      tags = ["aviation", "airport", "location"]
      layer = "integration"
      subjectArea = "airports"
      description = "airport names and locations"
    }
  }

}

actions {

  download-airports {
    type = FileTransferAction
    inputId = ext-airports
    outputId = stg-airports
    metadata {
      feed = download
      name = "Airport ingestion"
      tags = ["download", "websource"]
      description = "download airport data and write into CSV"
    }
  }

  historize-airports {
    type = HistorizeAction
    inputId = stg-airports
    outputId = int-airports
    mergeModeEnable = true
    transformers = [{
      type = SQLDfTransformer
      code = "select ident, name, latitude_deg, longitude_deg from stg_airports"
    }]
    metadata {
      feed = compute
      name = "Flight departure data injection"
      tags = ["deduplicated", "DeltaLake"]
      description = "download and cleaning of flight departure data"
    }
  }
}


dataObjects {
  btl_departures_arrivals_airports =  ${templates.dataLake} {
    partitions = [est_departure_airport]
    table {
      db = "default"
      name = "btl_departures_arrivals_airports"
    }
  }

  btl_distances =  ${templates.dataLake} {
    partitions = [est_departure_airport]
    table {
      db = "default"
      name = "btl_distances"
    }

// Block 3 from Puzzle 3. It fails because the condition is not fullfilled, we do get strange data indeed!
//    constraints = [{
//      name = Departure Airport should be different from Arrival Aiport
//     description = "A flight from A to A makes no sense"
//      expression = "est_arrival_airport != est_departure_airport"
//     errorMsgCols = [est_departure_airport,est_arrival_airport, arr_name, arr_latitude_deg, arr_longitude_deg, dep_name, dep_latitude_deg, dep_longitude_deg]
//    }]

    //Code Block 4 from Puzzle 3
    expectations = [{
      type = SQLFractionExpectation
      name = RailPessimist
      description = "most flights could be replaced by rail"
      countConditionExpression = "could_be_done_by_rail = true"
      expectation = "< 0.5"
      failedSeverity = "Warn"
    }]
  }

}

actions {
  join-departures-airports {
    type = CustomDataFrameAction
    inputIds = [int_departures, int_airports]
    outputIds = [btl_departures_arrivals_airports]
    transformers = [{
      type = SQLDfsTransformer
      code = {
        btl-connected-airports = """
          select int_departures.est_departure_airport, int_departures.est_arrival_airport,
            airports.*
          from int_departures join int_airports airports on int_departures.est_arrival_airport = airports.ident
        """
      }},
      {
        type = SQLDfsTransformer
        code = {
          btl_departures_arrivals_airports = """
            select btl_connected_airports.est_departure_airport, btl_connected_airports.est_arrival_airport,
              btl_connected_airports.name as arr_name, btl_connected_airports.latitude_deg as arr_latitude_deg, btl_connected_airports.longitude_deg as arr_longitude_deg,
              airports.name as dep_name, airports.latitude_deg as dep_latitude_deg, airports.longitude_deg as dep_longitude_deg
            from btl_connected_airports join int_airports airports on btl_connected_airports.est_departure_airport = airports.ident
          """
        }
      }
    ]
    executionCondition = {
      description = "execute also if airports is skipped beforehand"
      expression = "!inputSubFeeds.int_departures.isSkipped"
    }
    metadata {
      name = "Airport Departures Join"
      description = "merging flight details and airport locations"
      tags = ["merge", "airports", "coordinates"]
      feed = compute
    }
  }

  compute-distances {
    type = CopyAction
    inputId = btl_departures_arrivals_airports
    outputId = btl_distances
    transformers = [{
      type = ScalaClassSparkDfTransformer
      className = com.sample.ComputeDistanceTransformer
    }]
    metadata {
      name = "Flight distance computation"
      description = "compute the flight distance between departure and arrival"
      tags = ["compute", "coordinates", "distances"]
      feed = compute
    }
  }
}

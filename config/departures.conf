dataObjects {

  ext_departures {
    type = com.sample.CustomWebserviceDataObject
    baseUrl = "https://opensky-network.org/api/flights/departure"
    responseRowSchema = """icao24 string, firstSeen bigint, estDepartureAirport string, lastSeen bigint, estArrivalAirport string, callsign string, estDepartureAirportHorizDistance bigint, estDepartureAirportVertDistance bigint, estArrivalAirportHorizDistance bigint, estArrivalAirportVertDistance bigint, departureAirportCandidatesCount bigint, arrivalAirportCandidatesCount bigint"""
    nRetry = 1
    queryParameters = [{
      airport = "LSZB"
    }, {
      airport = "EDDF"
    }]
    timeouts {
      connectionTimeoutMs = 3000
      readTimeoutMs = 200000
    }

    metadata = {
      name = "Flight Departures Web Download"
      description = "OpenSky Network flight departures"
      layer = "extern"
      subjectArea = "flight data"
      tags = ["aviation", "flight", "departures"]
    }
  }

  stg_departures {
    type = CsvFileDataObject
    path = "data/~{id}"
    csvOptions {
      mode=failfast #this will prevent people from reading a csv with semicolon delimiter and getting a very strange error
    }
  }

  int_departures =  ${templates.dataLake} {
    table {
      db = "default"
      name = "int_departures"
      primaryKey = [icao24, est_departure_airport, dt]
    }
    partitions = [est_departure_airport]
    metadata = {
      name = "Flight Departures"
      description = "OpenSky Network flight departures"
      layer = "integration"
      subjectArea = "flight data"
      tags = ["aviation", "flight", "departures"]
    }
  }
}

actions {

  download-departures {
    type = CopyAction
    inputId = ext_departures
    outputId = stg_departures
    metadata {
      feed = download-deduplicate-departures
    }
  }

  download-deduplicate-departures {
    type = CopyAction
    inputId = stg_departures
    outputId = int_departures

    transformers = [{
      type = StandardizeColNamesTransformer
    },{
      type = SQLDfTransformer
      code = "select %{inputViewName}.*, date_format(from_unixtime(first_seen),'yyyyMMdd') dt from %{inputViewName}"
    },{
      type = ScalaCodeSparkDfTransformer
      code = """
        import org.apache.spark.sql.{DataFrame, SparkSession}
        def transform(session: SparkSession, options: Map[String,String], df: DataFrame, dataObjectId: String) : DataFrame = {
          import session.implicits._
          df.dropDuplicates("icao24", "est_departure_airport", "dt")
        }
        // return as function
        transform _
      """
    }]
    metadata {
      name = "Flight departure data injection"
      description = "download and cleaning of flight departure data"
      tags = ["deduplicated", "DeltaLake"]
      feed = download-deduplicate-departures
    }
  }
}

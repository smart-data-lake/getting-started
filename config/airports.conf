
dataObjects {
  ext_airports {
    type = WebserviceFileDataObject
    url = "https://davidmegginson.github.io/ourairports-data/airports.csv"
    followRedirects = true
    timeouts {
      connectionTimeoutMs = 3000
      readTimeoutMs = 200000
    }
  }

  ### TODO remove all below (beside of the above ext_airports)
  stg_airports { ### TODO remove for training
    type = CsvFileDataObject
    path = ${env.datalakeprefix}"/~{id}" // first we had: path = "data/~{id}"
    csvOptions {
      mode=failfast #this will prevent people from reading a csv with semicolon delimiter and getting a very strange error
    }
    metadata {
      name = "Staging file of Airport location data"
      description = "contains beside GPS coordiantes, elevation, continent, country, region"
      layer = "staging"
      subjectArea = "airports"
      tags = ["aviation", "airports", "location"]
    }
  }

  int_airports = ${templates.dataLake} { ### TODO remove for training
    table {
      db = "default"
      name = "int_airports"
      primaryKey = [ident]
    }
    allowSchemaEvolution = true
    metadata {
      name = "Airport locations"
      description = "airport names and locations"
      layer = "integration"
      subjectArea = "airports"
      tags = ["aviation", "airports", "location"]
    }
  }

  btl_airports_elevation { ### TODO remove for training
    type = CsvFileDataObject
    path = ${env.datalakeprefix}"/~{id}" // first we had: path = "data/~{id}"
    sparkRepartition { #This will create only one .csv file and not many!
      numberOfTasksPerPartition=1
      filename="elevation.csv"
    }
    csvOptions {
      mode=failfast
    }
    metadata {
      name = "Calculated Airport elevation in meters"
      description = "contains beside GPS coordiantes, elevation, continent, country, region"
      layer = "business transformation"
      subjectArea = "airports"
      tags = ["aviation", "airports", "location"]
    }
  }
}

actions {

  download-airports {
    type = FileTransferAction
    inputId = ext_airports
    outputId = stg_airports
    metadata { ### TODO remove for training
      name = "Airport injection"
      description = "download airport data and write into CSV"
      tags = ["download", "websource"]
      feed = download-airports
    }
  }

  export-airport-elevations { ### TODO remove for training
    type = CopyAction
    inputId = stg_airports
    outputId = btl_airports_elevation
    transformers = [{
      type = SQLDfTransformer
      code = "select name, elevation_ft, (elevation_ft / 3.281) as elevation_meters from stg_airports" #Tricky, do not use comma but decimal point ;-)
    }]
    metadata {
      name = "Airport elevation"
      description = "Write airport elevation in meters to Parquet file"
      feed = download-airports
    }
  }

  historize-airports { ### TODO remove for training
    type = HistorizeAction
    mergeModeEnable = true
    inputId = stg_airports
    outputId = int_airports
    transformers = [{
      type = SQLDfTransformer
      code = "select ident, name, latitude_deg, longitude_deg from stg_airports" // TODO add foobar for training debug
    }]
    metadata {
      name = "Airport historization and filter"
      description = "Filter name and coordinates of airports and hisorize data"
      tags = ["historize", "filter", "DeltaLake"]
      feed = historize-airports
    }
  }
}
